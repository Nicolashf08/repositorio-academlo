html {
  font-family: sans-serif;
  font-size: 16px;
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

body {
  margin: 0;
  padding: 0 20px;
  background-color: #f5f5f5;
  border-top: 4px solid royalblue;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

img {
  max-width: 100%;
}

.contenedor__imagen {
  max-width: 350px;
  margin: 0 auto;
}

/* Para activar el modo flexbox, hemos utilizado sobre el elemento contenedor la propiedad display y especificar el valor flex o inline-flex (dependiendo de como queramos que se comporte el contenedor): */

.container {
  display: flex; /* flex | inline-flex */
  width: 100%;
  min-height: 50vh;
  background-color: lightskyblue;
  border: 4px solid rgba(0, 0, 255, 0.203);
  border-radius: 8px;
}

.container > div {
  width: 150px;
  padding: 20px;
  background-color: lightcyan;
  border: 2px solid white;
  outline: 1px dashed blue;
  border-radius: 8px;
}

/* flex-direction: Cambia la orientación del eje principal. */
.direction {
  flex-direction: row; /* row | row-reverse | column | column-reverse */
}

/* 
  - row:	Establece la dirección del eje principal en horizontal.
  - row-reverse:|	Establece la dirección del eje principal en horizontal (invertido).
  - column:	Establece la dirección del eje principal en vertical.
  column-reverse: -	Establece la dirección del eje principal en vertical (invertido).
*/

/* Contenedor flexbox multilínea */
.wrap {
  flex-wrap: nowrap; /* wrap | nowrap | wrap-reverse */
}

/*
  - nowrap:	Establece los ítems en una sola línea (no permite que se desborde el contenedor).
  - wrap:	Establece los ítems en modo multilínea (permite que se desborde el contenedor).
  - wrap-reverse:	Establece los ítems en modo multilínea, pero en dirección inversa.
*/

/* Atajo: Dirección de los ejes
  flex-flow: <flex-direction> <flex-wrap>;
*/

/* Alineación */
.alineacion {
  /* justify-content: Se utiliza para alinear los ítems del eje principal (por defecto, el horizontal): */
  justify-content: flex-start; /* flex-start | flex-end | center | space-between | space-around */

  /* align-items: Usada para alinear los ítems del eje secundario (por defecto, el vertical): */
  align-items: stretch; /* flex-start | flex-end | center | baseline | stretch */
}

/* align-content */

.align-content {
  flex-wrap: wrap;
  justify-content: center;
  align-content: center; /* flex-start | flex-end | center | space-between | space-around | stretch */
}

/* Atajo: Alineaciones
  place-content: <align-content> <justify-content>;
*/

/* Propiedades para los Flex Items */

/* align-self: nos permite cambiar el comportamiento de align-items y sobreescribirlo con comportamientos específicos para ítems concretos que no queremos que se comporten igual que el resto. */

.align-self div:nth-child(1) {
  align-self: flex-start; /* flex-start | flex-end | center | baseline | stretch */
}

.align-self div:nth-child(2) {
  align-self: flex-end;
}

.align-self div:nth-child(3) {
  align-self: center;
}

.align-self div:nth-child(4) {
  align-self: baseline;
}

.align-self div:nth-child(5) {
  align-self: stretch;
}

/* flex-grow: la usamos para indicar el factor de crecimiento de los ítems en el caso de que no tengan un ancho específico. */

.grow {
  align-items: center;
}

.grow div:nth-child(1) {
  flex-grow: 0; /* Número que indica el factor de crecimiento del ítem respecto al resto. */
}

.grow div:nth-child(2) {
  flex-grow: 2;
}

.grow div:nth-child(3) {
  flex-grow: 1;
}

/* flex-shirnk aplica un factor de decrecimiento. De esta forma, los ítems que tengan un valor numérico más grande, serán más pequeños, mientras que los que tengan un valor numérico más pequeño serán más grandes */

.shrink {
  align-items: center;
}

.shrink div:nth-child(1) {
  flex-shrink: 0; /* Número que indica el factor de decrecimiento del ítem respecto al resto. */
}

.shrink div:nth-child(2) {
  flex-shrink: 0;
}

.shrink div:nth-child(3) {
  flex-shrink: 0;
}

/* flex-basis define el tamaño por defecto (de base) que tendrán los ítems antes de aplicarle la distribución de espacio. */

.basis {
  align-items: center;
}

.basis div:nth-child(1) {
  flex-basis: 50px; /* (size | content) Tamaño base de los ítems antes de aplicar variación. */
  /* Generalmente, se aplica un tamaño (unidades, porcentajes, etc...), pero también se puede aplicar la palabra clave content que ajusta automáticamente el tamaño al contenido del ítem, que es su valor por defecto. */
}

.basis div:nth-child(2) {
  flex-basis: 50px;
}

.basis div:nth-child(3) {
  flex-basis: 1000px;
}

/* Atajo: Propiedades de hijos
  flex: <flex-grow> <flex-shrink> <flex-basis>
*/

/* Huecos (gaps) */
/*
  Ten en cuenta que sólo una de las dos propiedades tendrá efecto, dependiendo de si la propiedad flex-direction está establecida en column o en row. Eso sí, es posible usar ambas si tenemos la propiedad flex-wrap definida a wrap y, por lo tanto, disponemos de multicolumnas flexbox.
*/

.gaps {
  justify-content: center;
  align-items: center;

  row-gap: 10px; /* row-gap: Espacio entre filas (sólo si flex-direction: column) */

  column-gap: 10px; /* column-gap: Espacio entre columnas (sólo si flex-direction: row) */
}

/* Atajo: Huecos
  gap: <row> <column>

  1 parámetro: usa el mismo para ambos
  gap: <ambos>
*/

/* Orden de los ítems */
/* 
Por defecto, todos los ítems flex tienen un order: 0 implícito, aunque no se especifique. Si indicamos un order con un valor numérico, irá recolocando los ítems según su número, colocando antes los ítems con número más pequeño (incluso valores negativos) y después los ítems con números más altos.
*/
.order {
  align-items: center;
}

.order div:nth-child(1) {
  order: 4; /* Número que indica el orden de los ítems. */
}

.order div:nth-child(2) {
  order: 2;
}

.order div:nth-child(3) {
  order: 3;
}

.order div:nth-child(4) {
  order: 1;
}

.order div:nth-child(5) {
  order: 5;
}
